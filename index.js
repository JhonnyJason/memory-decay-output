// Generated by CoffeeScript 2.7.0
//###########################################################
var allMemoryObjects, defaultDecayMS, letForget, nextMemId;

defaultDecayMS = 30000;

//############################################################
allMemoryObjects = [];

nextMemId = 0;

//###########################################################
export var setDefaultDecayMS = function(decayMS) {
  defaultDecayMS = decayMS;
};

//###########################################################
export var makeForgetableMemory = function(obj, decayMS) {
  var toForgetTimers;
  if (decayMS == null) {
    decayMS = defaultDecayMS;
  }
  Object.defineProperties(obj, {
    "__memoryid": {
      value: nextMemId++,
      enumerable: false,
      writable: false
    },
    "letForget": {
      value: letForget,
      enumerable: false,
      writable: false
    }
  });
  toForgetTimers = {};
  allMemoryObjects[obj.__memoryid] = {decayMS, toForgetTimers};
  return obj;
};

//###########################################################
letForget = function(key, ms) {
  var decayMS, forget, memObj, targetObj, timeoutId;
  if (typeof key !== "string") {
    // console.log("letForget "+key)
    throw new Error("Key was not a string!");
  }
  targetObj = this;
  memObj = allMemoryObjects[targetObj.__memoryid];
  if (ms != null) {
    decayMS = ms;
  } else {
    decayMS = memObj.decayMS;
  }
  forget = function() {
    delete targetObj[key];
    delete memObj.toForgetTimers[key];
  };
  // console.log("before: "+Object.keys(memObj.toForgetTimers))
  // console.log("forget "+key)
  timeoutId = memObj.toForgetTimers[key];
  if (timeoutId != null) {
    clearTimeout(timeoutId);
  }
  timeoutId = setTimeout(forget, decayMS);
  memObj.toForgetTimers[key] = timeoutId;
};

// console.log("after: "+Object.keys(memObj.toForgetTimers))
